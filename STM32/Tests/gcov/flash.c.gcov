        -:    0:Source:/home/aren/DiveCANHeadRev2/STM32/Core/Src/Hardware/flash.c
        -:    0:Graph:test-obj///home/aren/DiveCANHeadRev2/STM32/Core/Src/Hardware/flash.gcno
        -:    0:Data:test-obj///home/aren/DiveCANHeadRev2/STM32/Core/Src/Hardware/flash.gcda
        -:    0:Runs:1
        -:    1:#include "flash.h"
        -:    2:#include <math.h>
        -:    3:#include "eeprom_emul.h"
        -:    4:#include "stm32l4xx_hal.h"
        -:    5:#include "log.h"
        -:    6:
        -:    7:/*  Define where stuff lives in the eeprom (only 100 vars up for grabs with current configuration) */
        -:    8:static const uint8_t ANALOG_CELL_EEPROM_BASE_ADDR = 0x01;
        -:    9:static const uint8_t FATAL_ERROR_BASE_ADDR = 0x04;
        -:   10:static const uint8_t NON_FATAL_ERROR_BASE_ADDR = 0x05;
        -:   11:static const uint8_t CONFIG_BASE_ADDRESS = 0x06;
        -:   12:
        -:   13:static const uint32_t CAL_TO_INT32 = 10000000;
        -:   14:
        -:   15:static const uint8_t MAX_WRITE_ATTEMPTS = 3;
        -:   16:
        -:   17:#ifdef TESTING
       84:   18:uint32_t set_bit(uint32_t number, uint32_t n, bool x)
        -:   19:#else
        -:   20:static inline uint32_t set_bit(uint32_t number, uint32_t n, bool x)
        -:   21:#endif
        -:   22:{
       84:   23:    return (number & ~((uint32_t)1 << n)) | ((uint32_t)x << n);
        -:   24:}
        -:   25:
        9:   26:void setOptionBytes(void)
        -:   27:{
        9:   28:    if (HAL_OK != HAL_FLASH_Unlock())
        -:   29:    {
        2:   30:        NON_FATAL_ERROR(FLASH_LOCK_ERR);
        -:   31:    }
        -:   32:    else
        -:   33:    {
        -:   34:        /* Set up the option bytes */
        7:   35:        FLASH_OBProgramInitTypeDef optionBytes = {0};
        7:   36:        HAL_FLASHEx_OBGetConfig(&optionBytes);
        7:   37:        uint32_t original_opt = optionBytes.USERConfig;
        -:   38:
        -:   39:        /* nBoot0 irrelevant, leave as true*/
        7:   40:        optionBytes.USERConfig = set_bit(optionBytes.USERConfig, FLASH_OPTR_nBOOT0_Pos, true);
        -:   41:
        -:   42:        /* nSWBOOT0 true to take boot mode from pin */
        7:   43:        optionBytes.USERConfig = set_bit(optionBytes.USERConfig, FLASH_OPTR_nSWBOOT0_Pos, true);
        -:   44:
        -:   45:        /* Reset SRAM2 on reset */
        7:   46:        optionBytes.USERConfig = set_bit(optionBytes.USERConfig, FLASH_OPTR_SRAM2_RST_Pos, false);
        -:   47:
        -:   48:        /* Don't do SRAM parity check */
        7:   49:        optionBytes.USERConfig = set_bit(optionBytes.USERConfig, FLASH_OPTR_SRAM2_PE_Pos, true);
        -:   50:
        -:   51:        /* nBoot1 irrelevant, leave as true*/
        7:   52:        optionBytes.USERConfig = set_bit(optionBytes.USERConfig, FLASH_OPTR_nBOOT1_Pos, true);
        -:   53:
        -:   54:        /* These flags are undocumented so don't touch them */
        -:   55:        /*
        -:   56:        FLASH_OB_DUALBANK
        -:   57:        FLASH_OB_BFB2
        -:   58:        */
        -:   59:
        -:   60:        /* Window watch dog software controlled */
        7:   61:        optionBytes.USERConfig = set_bit(optionBytes.USERConfig, FLASH_OPTR_WWDG_SW_Pos, true);
        -:   62:
        -:   63:        /* Don't freeze IWDG in standby mode */
        7:   64:        optionBytes.USERConfig = set_bit(optionBytes.USERConfig, FLASH_OPTR_IWDG_STDBY_Pos, true);
        -:   65:
        -:   66:        /* Don't freeze IWDG in stop mode*/
        7:   67:        optionBytes.USERConfig = set_bit(optionBytes.USERConfig, FLASH_OPTR_IWDG_STOP_Pos, true);
        -:   68:
        -:   69:        /* Start the IWDG on power up */
        7:   70:        optionBytes.USERConfig = set_bit(optionBytes.USERConfig, FLASH_OPTR_IWDG_SW_Pos, false);
        -:   71:
        -:   72:        /* Do reset on shutdown */
        7:   73:        optionBytes.USERConfig = set_bit(optionBytes.USERConfig, FLASH_OPTR_nRST_SHDW_Pos, true);
        -:   74:
        -:   75:        /* Do reset on standby */
        7:   76:        optionBytes.USERConfig = set_bit(optionBytes.USERConfig, FLASH_OPTR_nRST_STDBY_Pos, true);
        -:   77:
        -:   78:        /* Do reset on stop */
        7:   79:        optionBytes.USERConfig = set_bit(optionBytes.USERConfig, FLASH_OPTR_nRST_STOP_Pos, true);
        -:   80:
        -:   81:        /* Reset at 2.8V, implies we're loosing regulation */
        7:   82:        optionBytes.USERConfig |= FLASH_OPTR_BOR_LEV_4;
        -:   83:
        7:   84:        optionBytes.USERType = OB_USER_nBOOT0 |
        -:   85:                               OB_USER_nSWBOOT0 |
        -:   86:                               OB_USER_nRST_SHDW |
        -:   87:                               OB_USER_SRAM2_PE |
        -:   88:                               OB_USER_nBOOT1 |
        -:   89:                               OB_USER_WWDG_SW |
        -:   90:                               OB_USER_IWDG_STDBY |
        -:   91:                               OB_USER_IWDG_STOP |
        -:   92:                               OB_USER_IWDG_SW |
        -:   93:                               OB_USER_nRST_STDBY |
        -:   94:                               OB_USER_nRST_STOP |
        -:   95:                               OB_USER_BOR_LEV;
        -:   96:
        -:   97:        /* Short circuit eval of conditions, only true if we try writing and fail*/
        7:   98:        if ((optionBytes.USERConfig != original_opt) && (HAL_OK != HAL_FLASHEx_OBProgram(&optionBytes)))
        -:   99:        {
        1:  100:            NON_FATAL_ERROR(EEPROM_ERR);
        -:  101:        }
        -:  102:
        7:  103:        if (HAL_OK != HAL_FLASH_Lock())
        -:  104:        {
        2:  105:            NON_FATAL_ERROR(FLASH_LOCK_ERR);
        -:  106:        }
        -:  107:    }
        9:  108:}
        -:  109:
        4:  110:void initFlash(void)
        -:  111:{
        -:  112:    /* Set up flash erase */
        4:  113:    if (HAL_OK != HAL_FLASH_Unlock())
        -:  114:    {
        1:  115:        NON_FATAL_ERROR(FLASH_LOCK_ERR);
        -:  116:    }
        -:  117:    else
        -:  118:    {
        3:  119:        if (EE_OK != EE_Init(EE_FORCED_ERASE))
        -:  120:        {
        1:  121:            NON_FATAL_ERROR(EEPROM_ERR);
        -:  122:        }
        -:  123:
        3:  124:        if (HAL_OK != HAL_FLASH_Lock())
        -:  125:        {
        1:  126:            NON_FATAL_ERROR(FLASH_LOCK_ERR);
        -:  127:        }
        -:  128:    }
        -:  129:
        4:  130:    setOptionBytes();
        4:  131:}
        -:  132:
       97:  133:static bool WriteInt32(uint16_t addr, uint32_t value)
        -:  134:{
       97:  135:    bool writeOk = true; /*  Presume that we're doing ok, if we hit a fail state then false it */
       97:  136:    uint8_t attempts = 0;
       97:  137:    EE_Status result = EE_OK;
        -:  138:    do
        -:  139:    {
      117:  140:        if (HAL_OK == HAL_FLASH_Unlock())
        -:  141:        {
      108:  142:            __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_PROGERR | FLASH_FLAG_WRPERR |
        -:  143:                                   FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR | FLASH_FLAG_PGSERR | FLASH_FLAG_MISERR | FLASH_FLAG_FASTERR |
        -:  144:                                   FLASH_FLAG_RDERR | FLASH_FLAG_OPTVERR);
        -:  145:
      108:  146:            result = EE_WriteVariable32bits(addr, value);
      108:  147:            if (HAL_OK != HAL_FLASH_Lock())
        -:  148:            {
        9:  149:                LogMsg("WriteInt32: Flash lock error");
        9:  150:                writeOk = false;
        -:  151:            }
        -:  152:
      108:  153:            if (result == EE_CLEANUP_REQUIRED)
        -:  154:            {
        -:  155:                /*  This could be expensive, maybe it should be a queued job rather than eating up time in a task? */
        3:  156:                (void)EE_CleanUp(); /*  If it doesn't work we don't really care, we'll just get told to try it again next time, and if it keeps failing eventually something more important will break */
        -:  157:            }
      105:  158:            else if (result == EE_OK)
        -:  159:            {
        -:  160:                /*  Happy days, nothing really to do */
        -:  161:            }
        -:  162:            else /*  An error we don't handle */
        -:  163:            {
       12:  164:                LogMsg("WriteInt32: EEPROM error");
       12:  165:                writeOk = false;
        -:  166:            }
        -:  167:        }
        -:  168:        else
        -:  169:        {
        9:  170:            LogMsg("WriteInt32: Flash unlock error");
        9:  171:            writeOk = false;
        -:  172:        }
      117:  173:        ++attempts;
      117:  174:    } while ((!writeOk) && (attempts < MAX_WRITE_ATTEMPTS));
       97:  175:    return writeOk;
        -:  176:}
        -:  177:
        -:  178:/**  @brief Get the calibration coefficient for the given cell number from the eeprom
        -:  179: *  @param cellNumber The number of the cell to get the data for (0,1,2)
        -:  180: *  @param calCoeff (OUTVAR) A pointer to the calibration coefficient
        -:  181: *  @return Status of the read, true implies successful read with no errors
        -:  182: */
       11:  183:bool GetCalibration(uint8_t cellNumber, CalCoeff_t *calCoeff)
        -:  184:{
       11:  185:    uint32_t calInt = 0;
       11:  186:    bool calOK = false;
        -:  187:
       11:  188:    if (cellNumber > CELL_3)
        -:  189:    {
        1:  190:        LogMsg("GetCalibration: Invalid cell number");
        -:  191:    }
       10:  192:    else if (NULL == calCoeff)
        -:  193:    {
        1:  194:        LogMsg("GetCalibration: EEPROM Null calCoeff");
        -:  195:    }
        -:  196:    else
        -:  197:    {
        9:  198:        EE_Status result = EE_ReadVariable32bits(ANALOG_CELL_EEPROM_BASE_ADDR + cellNumber, &calInt);
        -:  199:
        9:  200:        *calCoeff = (Numeric_t)calInt / (Numeric_t)CAL_TO_INT32;
        -:  201:
        9:  202:        if (result == EE_OK)
        -:  203:        {
        3:  204:            calOK = true; /*  This is the happy path, everything else is flash errors that imply a bad cal read (and we just handle it gracefully here) */
        -:  205:        }
        6:  206:        else if (result == EE_NO_DATA) /*  If this is a fresh EEPROM then we need to init it */
        -:  207:        {
        3:  208:            CalCoeff_t defaultVal = 0;
        3:  209:            (void)SetCalibration(cellNumber, defaultVal); /*  We don't really care about the return val, either way its a fail to read */
        -:  210:        }
        -:  211:        else
        -:  212:        {
        -:  213:            /*  We got an unmanageable eeprom error */
        3:  214:            LogMsg("GetCalibration: Unmanageable eeprom error");
        -:  215:        }
        -:  216:    }
        -:  217:
       11:  218:    return calOK;
        -:  219:}
        -:  220:
        -:  221:/** @brief Write the calibration coefficient to the eeprom
        -:  222: *  @param cellNumber The number of the cell to get the data for (0,1,2)
        -:  223: *  @param calCoeff The float to write to flash
        -:  224: *  @return Status of the write, true implies successful write with no errors
        -:  225: */
       19:  226:bool SetCalibration(uint8_t cellNumber, CalCoeff_t calCoeff)
        -:  227:{
       19:  228:    bool writeOk = true; /*  Presume that we're doing ok, if we hit a fail state then false it */
       19:  229:    if (cellNumber > CELL_3)
        -:  230:    {
        1:  231:        LogMsg("SetCalibration: Invalid cell number");
        1:  232:        writeOk = false;
        -:  233:    }
        -:  234:    else
        -:  235:    {
        -:  236:        /*  Convert it to raw bytes */
       18:  237:        uint32_t calInt = (uint32_t)round(calCoeff * (CalCoeff_t)CAL_TO_INT32);
        -:  238:        /*   Write that shit to the eeprom */
       18:  239:        writeOk = WriteInt32(ANALOG_CELL_EEPROM_BASE_ADDR + cellNumber, calInt);
        -:  240:    }
       19:  241:    return writeOk;
        -:  242:}
        -:  243:
        -:  244:/** @brief Get the last fatal error to be lodged in the eeprom
        -:  245: *  @param err (OUTVAR) A pointer to a fatal err value
        -:  246: *  @return Status of the read, true implies successful read with no errors
        -:  247: */
       31:  248:bool GetFatalError(FatalError_t *err)
        -:  249:{
       31:  250:    bool readOk = false;
       31:  251:    if (NULL == err)
        -:  252:    {
        1:  253:        LogMsg("GetFatalError: EEPROM Null err");
        -:  254:    }
        -:  255:    else
        -:  256:    {
       30:  257:        uint32_t errInt = 0;
       30:  258:        EE_Status result = EE_ReadVariable32bits(FATAL_ERROR_BASE_ADDR, &errInt);
        -:  259:
       30:  260:        *err = (FatalError_t)errInt;
        -:  261:
       30:  262:        if (result == EE_OK)
        -:  263:        {
       10:  264:            readOk = true; /*  This is the happy path, everything else is flash errors that imply a bad read (and we just handle it gracefully here) */
        -:  265:        }
       20:  266:        else if (result == EE_NO_DATA) /*  If this is a fresh EEPROM then we need to init it */
        -:  267:        {
       10:  268:            FatalError_t defaultVal = NONE_FERR;
       10:  269:            (void)SetFatalError(defaultVal); /*  We don't really care about the return val, either way its a fail to read */
        -:  270:        }
        -:  271:        else
        -:  272:        {
        -:  273:            /*  We got an unmanageable eeprom error */
       10:  274:            LogMsg("GetFatalError: EEPROM error");
        -:  275:        }
        -:  276:    }
        -:  277:
       31:  278:    return readOk;
        -:  279:}
        -:  280:
        -:  281:/** @brief Write the fatal error to the flash NOTE: To avoid recursion this method cannot throw fatal errors
        -:  282: * @param err The fatal error that has occurred
        -:  283: * @return Status of the write, true implies successful write with no errors */
       20:  284:bool SetFatalError(FatalError_t err)
        -:  285:{
       20:  286:    bool writeOk = WriteInt32(FATAL_ERROR_BASE_ADDR, (uint32_t)err);
       20:  287:    return writeOk;
        -:  288:}
        -:  289:
        -:  290:/** @brief Get the number of instances of a nonfatal error
        -:  291: * @param err The error code to get the count for
        -:  292: * @param errCount (OUTVAR) A pointer to a count variable
        -:  293: * @return Status of the read, true implies successful read with no errors */
       85:  294:bool GetNonFatalError(NonFatalError_t err, uint32_t *errCount)
        -:  295:{
       85:  296:    bool readOk = false;
       85:  297:    if (NULL == errCount)
        -:  298:    {
        1:  299:        LogMsg("GetNonFatalError: EEPROM Null errCount");
        -:  300:    }
        -:  301:    else
        -:  302:    {
       84:  303:        EE_Status result = EE_ReadVariable32bits((uint16_t)(NON_FATAL_ERROR_BASE_ADDR + ((uint16_t)err)), errCount);
        -:  304:
       84:  305:        if (result == EE_OK)
        -:  306:        {
       28:  307:            readOk = true; /*  This is the happy path, everything else is flash errors that imply a bad read (and we just handle it gracefully here) */
        -:  308:        }
       56:  309:        else if (result == EE_NO_DATA) /*  If this is a fresh EEPROM then we need to init it */
        -:  310:        {
       28:  311:            NonFatalError_t defaultVal = err;
       28:  312:            uint32_t defaultCount = 0;
       28:  313:            (void)SetNonFatalError(defaultVal, defaultCount); /*  We don't really care about the return val, either way its a fail to read */
        -:  314:        }
        -:  315:        else
        -:  316:        {
        -:  317:            /*  We got an unmanageable eeprom error */
       28:  318:            LogMsg("GetNonFatalError: Fatal eeprom error");
        -:  319:        }
        -:  320:    }
        -:  321:
       85:  322:    return readOk;
        -:  323:}
        -:  324:
        -:  325:/** @brief Write the number of instances of a nonfatal error to the flash, each nonfatal error gets its own
        -:  326: *        block of flash so number of incidents can be tracked individually. NOTE: To avoid recursion this method cannot throw nonfatal errors
        -:  327: * @param err The nonfatal error that has occurred
        -:  328: * @param errCount The number of times (cumulative) that the error has occurred
        -:  329: * @return Status of the write, true implies successful write with no errors */
       56:  330:bool SetNonFatalError(NonFatalError_t err, uint32_t errCount)
        -:  331:{
       56:  332:    bool writeOk = WriteInt32((uint16_t)(NON_FATAL_ERROR_BASE_ADDR + (uint16_t)err), errCount);
       56:  333:    return writeOk;
        -:  334:}
        -:  335:
        4:  336:bool GetConfiguration(Configuration_t *const config)
        -:  337:{
        4:  338:    bool configOK = false;
        -:  339:
        4:  340:    if (NULL == config)
        -:  341:    {
        1:  342:        LogMsg("GetCalibration: EEPROM Null config");
        1:  343:        configOK = false;
        -:  344:    }
        -:  345:    else
        -:  346:    {
        3:  347:        uint32_t configBits = 0;
        3:  348:        EE_Status result = EE_ReadVariable32bits(CONFIG_BASE_ADDRESS, &configBits);
        3:  349:        if (result == EE_OK)
        -:  350:        {
        1:  351:            *config = setConfigBytes(configBits);
        1:  352:            configOK = true; /*  This is the happy path, everything else is flash errors that imply a bad cal read (and we just handle it gracefully here) */
        -:  353:        }
        2:  354:        else if (result == EE_NO_DATA) /*  If this is a fresh EEPROM then we need to init it */
        -:  355:        {
        1:  356:            (void)SetConfiguration(&DEFAULT_CONFIGURATION); /*  We don't really care about the return val, either way its a fail to read */
        -:  357:        }
        -:  358:        else
        -:  359:        {
        -:  360:            /*  We got an unmanageable eeprom error */
        1:  361:            LogMsg("GetConfig: Unmanageable eeprom error");
        -:  362:        }
        -:  363:    }
        -:  364:
        4:  365:    return configOK;
        -:  366:}
        -:  367:
        4:  368:bool SetConfiguration(const Configuration_t *const config)
        -:  369:{
        4:  370:    bool writeOk = true; /*  Presume that we're doing ok, if we hit a fail state then false it */
        4:  371:    if (NULL == config)
        -:  372:    {
        1:  373:        LogMsg("SetCalibration: EEPROM Null config");
        1:  374:        writeOk = false;
        -:  375:    }
        -:  376:    else
        -:  377:    {
        -:  378:        /*   Write that shit to the eeprom */
        3:  379:        writeOk = WriteInt32(CONFIG_BASE_ADDRESS, getConfigBytes(config));
        -:  380:    }
        4:  381:    return writeOk;
        -:  382:}
