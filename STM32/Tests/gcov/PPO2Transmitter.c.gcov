        -:    0:Source:/home/aren/DiveCANHeadRev2/STM32/Core/Src/DiveCAN/PPO2Transmitter.c
        -:    0:Graph:test-obj///home/aren/DiveCANHeadRev2/STM32/Core/Src/DiveCAN/PPO2Transmitter.gcno
        -:    0:Data:test-obj///home/aren/DiveCANHeadRev2/STM32/Core/Src/DiveCAN/PPO2Transmitter.gcda
        -:    0:Runs:1
        -:    1:#include "PPO2Transmitter.h"
        -:    2:#include "cmsis_os.h"
        -:    3:#include "main.h"
        -:    4:#include "../errors.h"
        -:    5:#include "../Hardware/printer.h"
        -:    6:#include "../PPO2Control/PPO2Control.h"
        -:    7:#include "../Hardware/log.h"
        -:    8:
        -:    9:typedef struct
        -:   10:{
        -:   11:    DiveCANDevice_t *device;
        -:   12:    QueueHandle_t c1;
        -:   13:    QueueHandle_t c2;
        -:   14:    QueueHandle_t c3;
        -:   15:} PPO2TXTask_params_t;
        -:   16:
        -:   17:/* Forward decls of local funcs */
        -:   18:void PPO2TXTask(void *arg);
        -:   19:Consensus_t calculateConsensus(const OxygenCell_t *const c1, const OxygenCell_t *const c2, const OxygenCell_t *const c3);
        -:   20:void setFailedCellsValues(Consensus_t *consensus);
        -:   21:
        1:   22:static osThreadId_t *getOSThreadId(void)
        -:   23:{
        -:   24:    static osThreadId_t PPO2TXTaskHandle;
        1:   25:    return &PPO2TXTaskHandle;
        -:   26:}
        -:   27:
        -:   28:/**
        -:   29: * @brief Initializes PPO2 TX Task with specified parameters.
        -:   30: * @param device Pointer to DiveCAN device struct
        -:   31: * @param c1 QueueHandle_t for cell queue 1
        -:   32: * @param c2 QueueHandle_t for cell queue 2
        -:   33: * @param c3 QueueHandle_t for cell queue 3
        -:   34: */
        1:   35:void InitPPO2TX(const DiveCANDevice_t *const device, QueueHandle_t c1, QueueHandle_t c2, QueueHandle_t c3)
        -:   36:{
        -:   37:    /* Need to init the struct locally then value copy into the static */
        -:   38:    static PPO2TXTask_params_t taskParams;
        -:   39:    static DiveCANDevice_t taskDiveCANDevice;
        -:   40:
        1:   41:    taskDiveCANDevice = *device;
        -:   42:
        1:   43:    PPO2TXTask_params_t params = {
        -:   44:        .device = &taskDiveCANDevice,
        -:   45:        .c1 = c1,
        -:   46:        .c2 = c2,
        -:   47:        .c3 = c3};
        -:   48:
        1:   49:    taskParams = params;
        -:   50:
        -:   51:    static uint32_t PPO2TXTask_buffer[PPO2TXTASK_STACK_SIZE];
        -:   52:    static StaticTask_t PPO2TXTask_ControlBlock;
        -:   53:    static const osThreadAttr_t PPO2TXTask_attributes = {
        -:   54:        .name = "PPO2TXTask",
        -:   55:        .attr_bits = osThreadDetached,
        -:   56:        .cb_mem = &PPO2TXTask_ControlBlock,
        -:   57:        .cb_size = sizeof(PPO2TXTask_ControlBlock),
        -:   58:        .stack_mem = &PPO2TXTask_buffer[0],
        -:   59:        .stack_size = sizeof(PPO2TXTask_buffer),
        -:   60:        .priority = CAN_PPO2_TX_PRIORITY,
        -:   61:        .tz_module = 0,
        -:   62:        .reserved = 0};
        -:   63:
        1:   64:    osThreadId_t *PPO2TXTaskHandle = getOSThreadId();
        1:   65:    *PPO2TXTaskHandle = osThreadNew(PPO2TXTask, &taskParams, &PPO2TXTask_attributes);
        1:   66:}
        -:   67:
        -:   68:/**
        -:   69: * @brief The job of this task is to ingest the cell data passed to it via queues, calculate their consensus,
        -:   70: *        then transmit this data via the CAN transiever to any other devices on the CAN network.
        -:   71: * @param arg Pointer to PPO2TXTask_params_t*, which has the cells and our device spec for the can bus
        -:   72: */
        1:   73:void PPO2TXTask(void *arg)
        -:   74:{
        1:   75:    PPO2TXTask_params_t *params = (PPO2TXTask_params_t *)arg;
        1:   76:    const DiveCANDevice_t *const dev = params->device;
        -:   77:    do
        -:   78:    {
        1:   79:        (void)osDelay(TIMEOUT_500MS_TICKS);
        -:   80:
        1:   81:        Consensus_t consensus = peekCellConsensus(params->c1, params->c2, params->c3);
        -:   82:
        1:   83:        LogPPO2State(consensus.includeArray[CELL_1],
        1:   84:                     consensus.includeArray[CELL_2],
        1:   85:                     consensus.includeArray[CELL_3],
        -:   86:                     consensus.precisionPPO2Array[CELL_1],
        -:   87:                     consensus.precisionPPO2Array[CELL_2],
        -:   88:                     consensus.precisionPPO2Array[CELL_3],
        -:   89:                     consensus.precisionConsensus);
        -:   90:
        -:   91:        /* Go through each cell and if any need cal, flag cal
        -:   92:         Also check for fail and mark the cell value as fail */
        1:   93:        setFailedCellsValues(&consensus);
        -:   94:
        1:   95:        txPPO2(dev->type, consensus.ppo2Array[CELL_1], consensus.ppo2Array[CELL_2], consensus.ppo2Array[CELL_3]);
        1:   96:        txMillivolts(dev->type, consensus.milliArray[CELL_1], consensus.milliArray[CELL_2], consensus.milliArray[CELL_3]);
        1:   97:        txCellState(dev->type, consensus.includeArray[CELL_1], consensus.includeArray[CELL_2], consensus.includeArray[CELL_3], consensus.consensus);
        -:   98:    } while (RTOS_LOOP_FOREVER);
        1:   99:}
        -:  100:
        -:  101:/** @brief Update the provided consensus object based on the cell states so that not-ok cells are FFed
        -:  102: *        Will also FF the whole set if we're wanting a calibration
        -:  103: * @param consensus the consensus struct to update
        -:  104: */
       17:  105:void setFailedCellsValues(Consensus_t *consensus)
        -:  106:{
        -:  107:    /* First check if we need to go into "needs cal" state */
       47:  108:    bool needsCal = (consensus->statusArray[0] == CELL_NEED_CAL) ||
       28:  109:                    (consensus->statusArray[1] == CELL_NEED_CAL) ||
       11:  110:                    (consensus->statusArray[2] == CELL_NEED_CAL);
        -:  111:
       17:  112:    if (needsCal && (!isCalibrating()))
        -:  113:    {
       28:  114:        for (uint8_t i = 0; i < CELL_COUNT; ++i)
        -:  115:        {
       21:  116:            consensus->ppo2Array[i] = PPO2_FAIL;
        -:  117:        }
        -:  118:    }
        -:  119:    else /* Otherwise just FF as needed */
        -:  120:    {
       40:  121:        for (uint8_t i = 0; i < CELL_COUNT; ++i)
        -:  122:        {
       30:  123:            if (consensus->statusArray[i] == CELL_FAIL)
        -:  124:            {
       12:  125:                consensus->ppo2Array[i] = PPO2_FAIL;
        -:  126:            }
        -:  127:        }
        -:  128:    }
       17:  129:}
