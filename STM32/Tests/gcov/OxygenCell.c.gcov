        -:    0:Source:/home/aren/DiveCANHeadRev2/STM32/Core/Src/Sensors/OxygenCell.c
        -:    0:Graph:test-obj///home/aren/DiveCANHeadRev2/STM32/Core/Src/Sensors/OxygenCell.gcno
        -:    0:Data:test-obj///home/aren/DiveCANHeadRev2/STM32/Core/Src/Sensors/OxygenCell.gcda
        -:    0:Runs:1
        -:    1:/** \file OxygenCell.c
        -:    2: *  \author Aren Leishman
        -:    3: *  \brief This is a generic oxygen cell used by both analog and digital cells
        -:    4: *         as a common calling convention.
        -:    5: */
        -:    6:
        -:    7:#include "OxygenCell.h"
        -:    8:#include <math.h>
        -:    9:#include "AnalogOxygen.h"
        -:   10:#include "DiveO2.h"
        -:   11:#include "OxygenScientific.h"
        -:   12:#include "eeprom_emul.h"
        -:   13:#include "../errors.h"
        -:   14:#include "../Hardware/printer.h"
        -:   15:#include "assert.h"
        -:   16:
        -:   17:/** @struct CalParameters_s
        -:   18: *  @brief Contains calibration parameters for an oxygen sensor.
        -:   19: *
        -:   20: *  The `deviceType` field specifies the type of device being used, while the
        -:   21: *  `fO2`, `pressureVal`, and `calMethod` fields specify the FO2 value,
        -:   22: *  pressure value, and calibration method to be used. The remaining fields
        -:   23: *  are for individual cell parameters.
        -:   24: */
        -:   25:typedef struct
        -:   26:{
        -:   27:    DiveCANType_t deviceType;
        -:   28:    FO2_t fO2;
        -:   29:    uint16_t pressureVal;
        -:   30:
        -:   31:    ShortMillivolts_t cell1;
        -:   32:    ShortMillivolts_t cell2;
        -:   33:    ShortMillivolts_t cell3;
        -:   34:
        -:   35:    OxygenCalMethod_t calMethod;
        -:   36:} CalParameters_t;
        -:   37:
        -:   38:/** @fn getQueueHandle
        -:   39: *  @brief Returns a pointer to the queue handle for a given oxygen cell.
        -:   40: *
        -:   41: *  The `cellNum` parameter specifies which cell to retrieve the queue handle
        -:   42: *  for. If `cellNum` is invalid, an error message will be logged and a safe
        -:   43: *  fallback queue handle will be returned.
        -:   44: *
        -:   45: *  @param[in] cellNum Index of the oxygen cell to retrieve the queue handle for.
        -:   46: *  @return Pointer to the queue handle for the specified oxygen cell.
        -:   47: */
    #####:   48:static QueueHandle_t *getQueueHandle(uint8_t cellNum)
        -:   49:{
        -:   50:    static QueueHandle_t cellQueues[CELL_COUNT];
    #####:   51:    QueueHandle_t *queueHandle = NULL;
    #####:   52:    if (cellNum >= CELL_COUNT)
        -:   53:    {
    #####:   54:        NON_FATAL_ERROR(INVALID_CELL_NUMBER_ERR);
    #####:   55:        queueHandle = &(cellQueues[0]); /* A safe fallback */
        -:   56:    }
        -:   57:    else
        -:   58:    {
    #####:   59:        queueHandle = &(cellQueues[cellNum]);
        -:   60:    }
    #####:   61:    return queueHandle;
        -:   62:}
        -:   63:
        -:   64:/** @fn getCell
        -:   65: *  @brief Returns a pointer to the oxygen cell handle for a given oxygen cell.
        -:   66: *
        -:   67: *  The `cellNum` parameter specifies which cell to retrieve the cell handle for.
        -:   68: *  If `cellNum` is invalid, an error message will be logged and a safe fallback
        -:   69: *  cell handle will be returned.
        -:   70: *
        -:   71: *  @param[in] cellNum Index of the oxygen cell to retrieve the cell handle for.
        -:   72: *  @return Pointer to the oxygen cell handle for the specified oxygen cell.
        -:   73: */
    #####:   74:static OxygenHandle_t *getCell(uint8_t cellNum)
        -:   75:{
        -:   76:    static OxygenHandle_t cells[CELL_COUNT];
    #####:   77:    OxygenHandle_t *cellHandle = NULL;
    #####:   78:    if (cellNum >= CELL_COUNT)
        -:   79:    {
    #####:   80:        NON_FATAL_ERROR(INVALID_CELL_NUMBER_ERR);
    #####:   81:        cellHandle = &(cells[0]); /* A safe fallback */
        -:   82:    }
        -:   83:    else
        -:   84:    {
    #####:   85:        cellHandle = &(cells[cellNum]);
        -:   86:    }
    #####:   87:    return cellHandle;
        -:   88:}
        -:   89:
        -:   90:#pragma region Initialisation
        -:   91:/**
        -:   92: * @brief Initializes and creates a new cell with the given cell number and cell type.
        -:   93: *
        -:   94: * @param[in] cellNumber The number of the cell to be initialized.
        -:   95: * @param[in] type The type of cell to be created (analog or digital).
        -:   96: * @return The handle to the newly created cell.
        -:   97: */
    #####:   98:QueueHandle_t CreateCell(uint8_t cellNumber, CellType_t type)
        -:   99:{
        -:  100:    /* This is only called at startup, so halt and catch fire is appropriate */
    #####:  101:    assert(cellNumber < 3);
    #####:  102:    OxygenHandle_t *cell = getCell(cellNumber);
    #####:  103:    cell->cellNumber = cellNumber;
        -:  104:
        -:  105:    static StaticQueue_t CellQueues_QueueStruct[CELL_COUNT];
        -:  106:    static uint8_t CellQueues_Storage[CELL_COUNT][sizeof(OxygenCell_t)];
    #####:  107:    QueueHandle_t *queueHandle = getQueueHandle(cellNumber);
    #####:  108:    *queueHandle = xQueueCreateStatic(1, sizeof(OxygenCell_t), CellQueues_Storage[cellNumber], &(CellQueues_QueueStruct[cellNumber]));
        -:  109:
    #####:  110:    cell->type = type;
    #####:  111:    switch (type)
        -:  112:    {
    #####:  113:    case CELL_ANALOG:
    #####:  114:        cell->cellHandle = Analog_InitCell(cell, *queueHandle);
    #####:  115:        break;
    #####:  116:    case CELL_DIVEO2:
    #####:  117:        cell->cellHandle = DiveO2_InitCell(cell, *queueHandle);
    #####:  118:        break;
    #####:  119:    case CELL_O2S:
    #####:  120:        cell->cellHandle = O2S_InitCell(cell, *queueHandle);
    #####:  121:        break;
    #####:  122:    default:
    #####:  123:        NON_FATAL_ERROR(UNREACHABLE_ERR);
        -:  124:    }
    #####:  125:    return *queueHandle;
        -:  126:}
        -:  127:#pragma endregion
        -:  128:#pragma region Calibration
        -:  129:
        -:  130:/**
        -:  131: * @brief Calibrate a given analog cell
        -:  132: * @param calPass Pointer to cal response variable
        -:  133: * @param i Cell index
        -:  134: * @param cell Pointer to oxygen cell handle
        -:  135: * @param ppO2 Calibration PPO2
        -:  136: * @param cellVals Response variable containing the millivolts of the calibration (i indexed)
        -:  137: * @param calErrors Response variable containing any calibration errors (i indexed)
        -:  138: */
    #####:  139:static void calibrateAnalogCell(DiveCANCalResponse_t *calPass, uint8_t i, OxygenHandle_t *cell, PPO2_t ppO2, ShortMillivolts_t *cellVals, NonFatalError_t *calErrors)
        -:  140:{
    #####:  141:    AnalogOxygenState_t *analogCell = (AnalogOxygenState_t *)cell->cellHandle;
    #####:  142:    cellVals[i] = Calibrate(analogCell, ppO2, &(calErrors[i]));
        -:  143:
        -:  144:    /* Check the cell calibrated properly, if it still says needs cal it was outside the cal envelope */
    #####:  145:    if (analogCell->status == CELL_NEED_CAL)
        -:  146:    {
    #####:  147:        *calPass = DIVECAN_CAL_FAIL_FO2_RANGE;
        -:  148:    }
        -:  149:
        -:  150:    /* A fail state means some kind of internal fault during cal */
    #####:  151:    if (analogCell->status == CELL_FAIL)
        -:  152:    {
    #####:  153:        *calPass = DIVECAN_CAL_FAIL_GEN;
        -:  154:    }
    #####:  155:}
        -:  156:
        -:  157:/**
        -:  158: * @brief Calibrate all of the analog cells based on the controller provided data
        -:  159: * @param calParams Struct containing the FO2 and atmospheric pressure, gets populated with cell millis and error messages
        -:  160: * @return Calibration status
        -:  161: */
    #####:  162:DiveCANCalResponse_t AnalogReferenceCalibrate(CalParameters_t *calParams)
        -:  163:{
    #####:  164:    DiveCANCalResponse_t calPass = DIVECAN_CAL_RESULT;
    #####:  165:    PPO2_t ppO2 = (calParams->fO2 * calParams->pressureVal) / 1000;
        -:  166:
        -:  167:    /* Now that we have the PPO2 we cal all the analog cells
        -:  168:     */
    #####:  169:    ShortMillivolts_t cellVals[CELL_COUNT] = {0};
    #####:  170:    NonFatalError_t calErrors[CELL_COUNT] = {NONE_ERR, NONE_ERR, NONE_ERR};
        -:  171:
    #####:  172:    serial_printf("Using PPO2 %u for cal\r\n", ppO2);
        -:  173:
    #####:  174:    for (uint8_t i = 0; i < CELL_COUNT; ++i)
        -:  175:    {
    #####:  176:        OxygenHandle_t *cell = getCell(i);
    #####:  177:        if (CELL_ANALOG == cell->type)
        -:  178:        {
    #####:  179:            calibrateAnalogCell(&calPass, i, cell, ppO2, cellVals, calErrors);
        -:  180:        }
        -:  181:
    #####:  182:        if (calErrors[i] != NONE_ERR)
        -:  183:        {
    #####:  184:            calPass = DIVECAN_CAL_FAIL_GEN;
        -:  185:        }
        -:  186:    }
        -:  187:
        -:  188:    /* Now that calibration is done lets grab the millivolts for the record */
    #####:  189:    calParams->cell1 = cellVals[CELL_1];
    #####:  190:    calParams->cell2 = cellVals[CELL_2];
    #####:  191:    calParams->cell3 = cellVals[CELL_3];
        -:  192:
    #####:  193:    return calPass;
        -:  194:}
        -:  195:
        -:  196:/**
        -:  197: * @brief Calibrates the Oxygen sensor using a digital reference cell.
        -:  198: *
        -:  199: * This function searches for a digital reference cell and uses it to calibrate all the analog cells.
        -:  200: * The calibration parameters are then stored in the `CalParameters_t` struct.
        -:  201: *
        -:  202: * @param calParams Pointer to the CalParameters struct where the calibration results will be stored.
        -:  203: * @return DiveCANCalResponse_t - Indicates the success or failure of the calibration process.
        -:  204: * @see CalParameters_t, DiveO2State_t, OxygenHandle_t, CELL_COUNT, DIVECAN_CAL_RESULT, DIVECAN_CAL_FAIL_GEN, DIVECAN_CAL_FAIL_REJECTED, TIMEOUT_100MS, NONE_ERR, Numeric_t, FO2_t, CELL_DIVEO2, CELL_ANALOG
        -:  205: */
    #####:  206:DiveCANCalResponse_t DigitalReferenceCalibrate(CalParameters_t *calParams)
        -:  207:{
    #####:  208:    DiveCANCalResponse_t calPass = DIVECAN_CAL_RESULT;
    #####:  209:    const DiveO2State_t *refCell = NULL;
    #####:  210:    uint8_t refCellIndex = 0;
        -:  211:    /* Select the first digital cell */
    #####:  212:    for (uint8_t i = 0; i < CELL_COUNT; ++i)
        -:  213:    {
    #####:  214:        const OxygenHandle_t *const cell = getCell(i);
    #####:  215:        if ((CELL_DIVEO2 == cell->type) && (NULL == refCell))
        -:  216:        {
    #####:  217:            refCell = (const DiveO2State_t *)cell->cellHandle;
    #####:  218:            refCellIndex = i;
        -:  219:        }
        -:  220:    }
        -:  221:
    #####:  222:    QueueHandle_t *queueHandle = getQueueHandle(refCellIndex);
        -:  223:
    #####:  224:    OxygenCell_t refCellData = {0};
    #####:  225:    BaseType_t peekStatus = xQueuePeek(*queueHandle, &refCellData, TIMEOUT_100MS_TICKS);
    #####:  226:    if ((refCell != NULL) && (pdTRUE == peekStatus) && (refCellData.status == CELL_OK))
    #####:  227:    {
    #####:  228:        PPO2_t ppO2 = refCellData.ppo2;
    #####:  229:        uint16_t pressure = (uint16_t)(refCell->pressure / 1000);
        -:  230:
        -:  231:        /* Now that we have the PPO2 we cal all the analog cells
        -:  232:         */
    #####:  233:        ShortMillivolts_t cellVals[CELL_COUNT] = {0};
    #####:  234:        NonFatalError_t calErrors[CELL_COUNT] = {NONE_ERR, NONE_ERR, NONE_ERR};
        -:  235:
    #####:  236:        for (uint8_t i = 0; i < CELL_COUNT; ++i)
        -:  237:        {
    #####:  238:            OxygenHandle_t *cell = getCell(i);
    #####:  239:            if (CELL_ANALOG == cell->type)
        -:  240:            {
    #####:  241:                calibrateAnalogCell(&calPass, i, cell, ppO2, cellVals, calErrors);
        -:  242:            }
        -:  243:
    #####:  244:            if (calErrors[i] != NONE_ERR)
        -:  245:            {
    #####:  246:                calPass = DIVECAN_CAL_FAIL_GEN;
        -:  247:            }
        -:  248:        }
        -:  249:
        -:  250:        /* Now that calibration is done lets grab the millivolts for the record */
    #####:  251:        calParams->cell1 = cellVals[CELL_1];
    #####:  252:        calParams->cell2 = cellVals[CELL_2];
    #####:  253:        calParams->cell3 = cellVals[CELL_3];
        -:  254:
    #####:  255:        calParams->pressureVal = pressure;
    #####:  256:        calParams->fO2 = (FO2_t)round((Numeric_t)ppO2 * (1000.0f / (Numeric_t)pressure));
        -:  257:    }
        -:  258:    else
        -:  259:    {
        -:  260:        /* We can't find a digital cell to cal with */
    #####:  261:        NON_FATAL_ERROR(CAL_METHOD_ERR);
    #####:  262:        calPass = DIVECAN_CAL_FAIL_REJECTED;
        -:  263:    }
    #####:  264:    return calPass;
        -:  265:}
        -:  266:
        -:  267:/**
        -:  268: * @brief This task handles the calibration process of the device by checking the calibration method used and then calling the appropriate function accordingly. The available calibration methods are CAL_DIGITAL_REFERENCE, CAL_ANALOG_ABSOLUTE, and CAL_TOTAL_ABSOLUTE.
        -:  269: * @param arg A pointer to the CalParameters_t struct which contains all necessary parameters for the calibration process.
        -:  270: */
    #####:  271:void CalibrationTask(void *arg)
        -:  272:{
    #####:  273:    CalParameters_t calParams = *((CalParameters_t *)arg);
    #####:  274:    DiveCANCalResponse_t calResult = DIVECAN_CAL_FAIL_REJECTED;
    #####:  275:    serial_printf("Starting calibrate with method %u\r\n", calParams.calMethod);
    #####:  276:    switch (calParams.calMethod)
        -:  277:    {
    #####:  278:    case CAL_DIGITAL_REFERENCE:          /* Calibrate using the solid state cell as a reference */
    #####:  279:        (void)osDelay(TIMEOUT_4s_TICKS); /* Give the shearwater time to catch up */
    #####:  280:        calResult = DigitalReferenceCalibrate(&calParams);
    #####:  281:        break;
    #####:  282:    case CAL_ANALOG_ABSOLUTE:
    #####:  283:        (void)osDelay(TIMEOUT_4s_TICKS);
    #####:  284:        calResult = AnalogReferenceCalibrate(&calParams);
    #####:  285:        break;
    #####:  286:    case CAL_TOTAL_ABSOLUTE:
    #####:  287:        calResult = DIVECAN_CAL_FAIL_REJECTED;
    #####:  288:        NON_FATAL_ERROR(UNDEFINED_CAL_METHOD_ERR);
    #####:  289:        break;
    #####:  290:    default:
    #####:  291:        calResult = DIVECAN_CAL_FAIL_REJECTED;
    #####:  292:        NON_FATAL_ERROR(UNDEFINED_CAL_METHOD_ERR);
        -:  293:    }
        -:  294:
    #####:  295:    txCalResponse(calParams.deviceType, calResult, calParams.cell1, calParams.cell2, calParams.cell3, calParams.fO2, calParams.pressureVal);
        -:  296:
    #####:  297:    osThreadExit();
    #####:  298:}
        -:  299:
        7:  300:static osThreadId_t *getOSThreadId(void)
        -:  301:{
        -:  302:    static osThreadId_t calTask;
        7:  303:    return &calTask;
        -:  304:}
        -:  305:
        7:  306:bool isCalibrating(void)
        -:  307:{
        7:  308:    osThreadId_t *calTask = getOSThreadId();
      14*:  309:    return !((osThreadGetState(*calTask) == osThreadError) ||
        7:  310:             (osThreadGetState(*calTask) == osThreadInactive) ||
    #####:  311:             (osThreadGetState(*calTask) == osThreadTerminated));
        -:  312:}
        -:  313:
        -:  314:/**
        -:  315: * @brief Start a new task (one off) to execute a calibration, this will silently fail if a calibration is already being done (why are you trying to calibrate while you calibrate?)
        -:  316: * @param deviceType DiveCAN device to send responses from
        -:  317: * @param in_fO2 FO2 reported to us to use in the calibration
        -:  318: * @param in_pressure_val ambient pressure to use in the calibration (millibar)
        -:  319: * @param calMethod Calibration method to use for calibration
        -:  320: */
    #####:  321:void RunCalibrationTask(DiveCANType_t deviceType, const FO2_t in_fO2, const uint16_t in_pressure_val, OxygenCalMethod_t calMethod)
        -:  322:{
        -:  323:    static CalParameters_t calParams;
        -:  324:
    #####:  325:    calParams.fO2 = in_fO2;
    #####:  326:    calParams.pressureVal = in_pressure_val;
    #####:  327:    calParams.deviceType = deviceType;
    #####:  328:    calParams.cell1 = 0;
    #####:  329:    calParams.cell2 = 0;
    #####:  330:    calParams.cell3 = 0;
        -:  331:
    #####:  332:    calParams.calMethod = calMethod;
        -:  333:
    #####:  334:    txCalAck(deviceType);
        -:  335:
        -:  336:    /*
        -:  337:     Don't start the thread if we're already calibrating, shearwater double shots us sometimes */
    #####:  338:    if (!isCalibrating())
        -:  339:    {
        -:  340:        static uint32_t CalTask_buffer[CALTASK_STACK_SIZE];
        -:  341:        static StaticTask_t CalTask_ControlBlock;
        -:  342:        static const osThreadAttr_t CalTask_attributes = {
        -:  343:            .name = "CalTask",
        -:  344:            .attr_bits = osThreadDetached,
        -:  345:            .cb_mem = &CalTask_ControlBlock,
        -:  346:            .cb_size = sizeof(CalTask_ControlBlock),
        -:  347:            .stack_mem = &CalTask_buffer[0],
        -:  348:            .stack_size = sizeof(CalTask_buffer),
        -:  349:            .priority = CAN_PPO2_TX_PRIORITY,
        -:  350:            .tz_module = 0,
        -:  351:            .reserved = 0};
        -:  352:
    #####:  353:        osThreadId_t *calTask = getOSThreadId();
    #####:  354:        *calTask = osThreadNew(CalibrationTask, &calParams, &CalTask_attributes);
        -:  355:    }
    #####:  356:}
        -:  357:
        -:  358:#pragma endregion
        -:  359:
        -:  360:#pragma region Consensus
        -:  361:
        -:  362:/**
        -:  363: * @brief Peek the given cell queue handles and calculate the consensus, cells that do not respond within 100ms are marked as failed.
        -:  364: * @param cell1 Cell 1 queue handle
        -:  365: * @param cell2 Cell 2 queue handle
        -:  366: * @param cell3 Cell 3 queue handle
        -:  367: * @return `Consenus_t` as calculated by `calculateConsensus` using the latest cell values
        -:  368: */
        1:  369:Consensus_t peekCellConsensus(QueueHandle_t cell1, QueueHandle_t cell2, QueueHandle_t cell3)
        -:  370:{
        -:  371:    /* First retreive the cell data */
        1:  372:    OxygenCell_t c1 = {0};
        1:  373:    bool c1pick = xQueuePeek(cell1, &c1, TIMEOUT_100MS_TICKS);
        1:  374:    OxygenCell_t c2 = {0};
        1:  375:    bool c2pick = xQueuePeek(cell2, &c2, TIMEOUT_100MS_TICKS);
        1:  376:    OxygenCell_t c3 = {0};
        1:  377:    bool c3pick = xQueuePeek(cell3, &c3, TIMEOUT_100MS_TICKS);
        -:  378:
        -:  379:    /* If the peek timed out then we mark the cell as failed going into the consensus calculation
        -:  380:     and lodge the nonfatal error */
        1:  381:    if (!c1pick)
        -:  382:    {
    #####:  383:        c1.status = CELL_FAIL;
    #####:  384:        NON_FATAL_ERROR(TIMEOUT_ERR);
        -:  385:    }
        1:  386:    if (!c2pick)
        -:  387:    {
    #####:  388:        c2.status = CELL_FAIL;
    #####:  389:        NON_FATAL_ERROR(TIMEOUT_ERR);
        -:  390:    }
        1:  391:    if (!c3pick)
        -:  392:    {
    #####:  393:        c3.status = CELL_FAIL;
    #####:  394:        NON_FATAL_ERROR(TIMEOUT_ERR);
        -:  395:    }
        -:  396:
        -:  397:    /* We calculate the consensus ourselves so we can make interpretations based on the cell confidence*/
        1:  398:    return calculateConsensus(&c1, &c2, &c3);
        -:  399:}
        -:  400:
        -:  401:static const uint8_t MAX_DEVIATION = 15; /* Max allowable deviation is 0.15 bar PPO2 */
        -:  402:
        -:  403:/** @brief Calculate the consensus PPO2, cell state aware but does not set the PPO2 to fail value for failed cells
        -:  404: *        In an all fail scenario we want that data to still be intact so we can still have our best guess
        -:  405: * @param c1
        -:  406: * @param c2
        -:  407: * @param c3
        -:  408: * @return
        -:  409: */
      127:  410:Consensus_t calculateConsensus(const OxygenCell_t *const c1, const OxygenCell_t *const c2, const OxygenCell_t *const c3)
        -:  411:{
        -:  412:    /* Zeroth step, load up the millis, status and PPO2
        -:  413:     * We also load up the timestamps of each cell sample so that we can check the other tasks
        -:  414:     * haven't been sitting idle and starved us of information
        -:  415:     */
      127:  416:    Timestamp_t sampleTimes[CELL_COUNT] = {
      127:  417:        c1->dataTime,
      127:  418:        c2->dataTime,
      127:  419:        c3->dataTime};
        -:  420:
      127:  421:    const Timestamp_t timeout = TIMEOUT_4s_TICKS; /* 4000 millisecond timeout to avoid stale data */
      127:  422:    Timestamp_t now = HAL_GetTick();
        -:  423:
      127:  424:    Consensus_t consensus = {
        -:  425:        .statusArray = {
      127:  426:            c1->status,
      127:  427:            c2->status,
      127:  428:            c3->status,
        -:  429:        },
        -:  430:        .ppo2Array = {
      127:  431:            c1->ppo2,
      127:  432:            c2->ppo2,
      127:  433:            c3->ppo2,
        -:  434:        },
        -:  435:        .precisionPPO2Array = {
      127:  436:            c1->precisionPPO2,
      127:  437:            c2->precisionPPO2,
      127:  438:            c3->precisionPPO2,
        -:  439:        },
        -:  440:        .milliArray = {
      127:  441:            c1->millivolts,
      127:  442:            c2->millivolts,
      127:  443:            c3->millivolts,
        -:  444:        },
        -:  445:        .consensus = 0,
        -:  446:        .precisionConsensus = 0,
        -:  447:        .includeArray = {true, true, true}};
        -:  448:
        -:  449:    /* Do a two pass check, loop through the cells and average the "good" cells
        -:  450:     * Then afterwards we check each cells value against the average, and exclude deviations
        -:  451:     */
      127:  452:    PIDNumeric_t PPO2_acc = 0; /* Start an accumulator to take an average, include the median cell always */
      127:  453:    uint8_t includedCellCount = 0;
        -:  454:
      508:  455:    for (uint8_t cellIdx = 0; cellIdx < CELL_COUNT; ++cellIdx)
        -:  456:    {
      381:  457:        if ((consensus.statusArray[cellIdx] == CELL_NEED_CAL) ||
      363:  458:            (consensus.statusArray[cellIdx] == CELL_FAIL) ||
      273:  459:            (consensus.statusArray[cellIdx] == CELL_DEGRADED) ||
      255:  460:            ((now - sampleTimes[cellIdx]) > timeout))
        -:  461:        {
      144:  462:            consensus.includeArray[cellIdx] = false;
        -:  463:        }
        -:  464:        else
        -:  465:        {
      237:  466:            PPO2_acc += consensus.precisionPPO2Array[cellIdx];
      237:  467:            ++includedCellCount;
        -:  468:        }
        -:  469:    }
        -:  470:
        -:  471:    /* Assert that we actually have cells that got included */
      127:  472:    if (includedCellCount > 0)
        -:  473:    {
        -:  474:        /* Now second pass, check to see if any of the included cells are deviant from the average */
      508:  475:        for (uint8_t cellIdx = 0; cellIdx < CELL_COUNT; ++cellIdx)
        -:  476:        {
        -:  477:            /* We want to make sure the cell is actually included before we start checking it */
      381:  478:            if ((includedCellCount > 0) &&
      381:  479:                (consensus.includeArray[cellIdx]) &&
      237:  480:                ((fabs((PPO2_acc / (PIDNumeric_t)includedCellCount) - consensus.precisionPPO2Array[cellIdx]) * 100.0f) > MAX_DEVIATION))
        -:  481:            {
        -:  482:                /* Removing cells in this way can result in a change in the outcome depending on
        -:  483:                 * cell position, depending on exactly how split-brained the cells are, but
        -:  484:                 * frankly if things are that cooked then we're borderline guessing anyway
        -:  485:                 */
       12:  486:                PPO2_acc -= consensus.precisionPPO2Array[cellIdx];
       12:  487:                --includedCellCount;
       12:  488:                consensus.includeArray[cellIdx] = false;
        -:  489:            }
        -:  490:        }
        -:  491:    }
        -:  492:
      127:  493:    if (includedCellCount > 0)
        -:  494:    {
      127:  495:        consensus.precisionConsensus = (PPO2_acc / (PIDNumeric_t)includedCellCount);
      127:  496:        PIDNumeric_t tempConsensus = consensus.precisionConsensus * 100.0f;
     127*:  497:        assert(tempConsensus < 255.0f);
      127:  498:        consensus.consensus = (PPO2_t)(tempConsensus);
        -:  499:    }
        -:  500:
      127:  501:    return consensus;
        -:  502:}
        -:  503:
        -:  504:/**
        -:  505: * @brief Calculate the cell confidence out of 3, 3 means 3 voted-in cells, 2 means 2 voted-in cells, etc
        -:  506: * @param consensus Consensus struct calculated from `calculateConsensus`
        -:  507: * @return Cell confidence out of 3
        -:  508: */
    #####:  509:uint8_t cellConfidence(const Consensus_t *const consensus)
        -:  510:{
    #####:  511:    uint8_t confidence = 0;
    #####:  512:    for (uint8_t i = 0; i < CELL_COUNT; ++i)
        -:  513:    {
    #####:  514:        if (consensus->includeArray[i])
        -:  515:        {
    #####:  516:            ++confidence;
        -:  517:        }
        -:  518:    }
    #####:  519:    return confidence;
        -:  520:}
        -:  521:#pragma endregion
